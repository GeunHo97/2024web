[ 소프트웨어/프로그램 개발시 사용되는 반복작업/패턴 ]
- MVC 디자인 패턴
    1. 목적 : 프로젝트를 구성할 때 복잡한 코드와 class 파일들을 MVC패턴의 따라 구성하는 방법
    - 왜?? 구분을 안해도 코드를 읽어보면 무슨 코드인지 알잖아.
        - 협업에서는 다양한 사람들이 동일한 프로젝트를 하면서 서로 다른 코드를 작성 하는걸 구분 방법
        - 하나의 파일에서 작성된 코드를 목적/사용 에 따라 MVC구성요소 로 분리
        장점 : 유지보수, 협업, 단일기능(모듈단위 : 추후에 다른 기능과 커스텀 쉽다.)
            예] 완제품 : 피규어 , 모듈제품 :  레고조각
        단점 : 클래스/.java파일/패키지 등등 파일구분이 많아서 파일 관리가 어렵다.
    2. 구성 종류
    - M(Model) : 모델         : 데이터 관리 담당
        -DTO( Data Transfer Object = 데이터 이동 객체 )
        -VO( Value Object = 값 객체 , setter 함수가 존재하지 않는 읽기모드 객체 )
        -DAO( Data Access Object = 데이터 접근 객체 , 주로 데이터베이스접근 객체 )

    - V(View) : 뷰(화면)       : 입출력 담당 ( 추후에 HTML/CSS/JS 프론트엔드 )
        - (콘솔기준) : Scanner , print 만 사용하는 구역

    - C(Controller) : 제어    : Model 과 View 사이 에서의 제어와 전달 담당
        - view 로부터 전달 받은 데이터를 Moder(Deo) 에게 전달 하는 역할
        - 데이터 유효성 검사
- 싱글(혼자)톤(객체) 패턴
    프로젝트내 하나의 객체만 가질수 있도록 만든는 패턴
    1. 목적 : 무의미한 객체가 많아지면 객체 관리가 힘들고 굳이 객체가 많이 필요없을때 사용, 즉] 객체가 1개만 필요할때 사용
        장점 : 객체가 1개 존재하므로 객체 관리가 편하다, ** 객체 정보 공유 **
        단점 : 메모리 효율성이 좋지 않을수 있다.
    2. 구성방법
        2-1. 싱글톤을 만들 클래스에서 현재 클래스의 private static 객체를 생성한다.
        2-2. 생성자를 외부로부터 차단한다. 생성자를 private 만든다
        2-3. private static 싱글톤 객체를 외부로부터 접근할 수 있도록 싱글톤 getter함수를 만든다
            public class 클래스명{ }
                private static 클래스명 .싱글톤변수명 = new 클래스명( );
                private 클래스명( ) { }
                public static 클래스명 get변수명( ){ }
                    return this.싱글톤변수명
            }
